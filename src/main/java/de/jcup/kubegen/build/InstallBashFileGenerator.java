package de.jcup.kubegen.build;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.SortedSet;
import java.util.TreeSet;

import de.jcup.kubegen.GenerationContext;

public class InstallBashFileGenerator {

	private BuildCommand build;

	public InstallBashFileGenerator(BuildCommand build) {
		if (build.k8sNamespace==null || build.k8sNamespace.isEmpty()) {
			/* should never happen, but...*/
			throw new IllegalArgumentException("No kubernetes namespace defined!");
		}
		this.build=build;
	}

	public void generate(GenerationContext context) throws IOException{
        StringBuilder kubectlOptions = new StringBuilder();
        kubectlOptions.append(kubectlOptionIfNotEmpty("--kubeconfig", context.project.getValue(context.environment, build.k8sConfigFileName)));
        kubectlOptions.append(kubectlOptionIfNotEmpty("--context", context.project.getValue(context.environment, build.k8sContext)));
        kubectlOptions.append(kubectlOptionIfNotEmpty("--namespace", context.project.getValue(context.environment, build.k8sNamespace)));

		File ouputFile = new File(context.targetFolder, "install.sh");
		SortedSet<String> sortedPathes = new TreeSet<>();
		for (File templateFile: context.allGeneratedYamlFiles) {
			sortedPathes.add(path(context,templateFile).replace('\\', '/'));
		}
		
		try (FileWriter fw = new FileWriter(ouputFile)) {	
			StringBuilder sb = new StringBuilder();
			sb.append("#!/bin/bash\n# Auto-generated by kubegen. Please do not hand-edit.\n\ncd `dirname $0`\n");
			for (String path: sortedPathes) {
                sb.append("kubectl"+kubectlOptions+" apply -f "+path+"\n");
			}
			fw.write(sb.toString());
		}
	}

	private String path(GenerationContext context, File file){
		String common = context.templateFolder.getAbsolutePath();
		String more = file.getAbsolutePath();
		if (! more.startsWith(common)){
			return more;
		}
		return more.substring(common.length()+1);
		
	}

	private String kubectlOptionIfNotEmpty(String option, String value){
        if (value==null || value.isEmpty()) {
            return "";
        }
        return " "+option+"=\""+value+"\"";        
    }
}
